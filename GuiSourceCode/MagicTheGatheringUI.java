/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SourceCode;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.DefaultListModel;


/**
 *
 * @author Brian Mack
 */
public class MagicTheGatheringUI extends javax.swing.JFrame {

    /**
     * Creates new form MagicTheGatheringUI
     */
    public MagicTheGatheringUI() {
        int i, size;
        
        colorRefinementFilter = "selected";
        try {
            my_list=new CardList();
            my_list.sortByName(my_list.all_cards);
            my_list.populateSubArrays();
            size = my_list.all_cards.size();
            
            for(i = 0; i < size; i++)
            {
                namesList.addElement(my_list.all_cards.get(i).name);
            }
        } catch(Exception e) {
            System.out.println(e);
            System.exit(0);
        }
        initComponents();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        simpleColorRefinementGroup = new javax.swing.ButtonGroup();
        simpleRarityGroup = new javax.swing.ButtonGroup();
        advancedColorRefinementGroup = new javax.swing.ButtonGroup();
        advancedRarityGroup = new javax.swing.ButtonGroup();
        cardAddToList = new javax.swing.JPopupMenu();
        addOne = new javax.swing.JMenuItem();
        addTwo = new javax.swing.JMenuItem();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        searchPanel = new javax.swing.JPanel();
        organizedList = new javax.swing.JScrollPane();
        fullCardList = new javax.swing.JList(namesList);
        SearchPane = new javax.swing.JTabbedPane();
        simpleSearchPane = new javax.swing.JPanel();
        simpleSearchButton = new javax.swing.JButton();
        simpleResetButton = new javax.swing.JButton();
        simpleRarityMythic = new javax.swing.JRadioButton();
        simpleRarityRare = new javax.swing.JRadioButton();
        simpleRarityUncommon = new javax.swing.JRadioButton();
        simpleRarityCommon = new javax.swing.JRadioButton();
        simpleLabelRarity = new javax.swing.JLabel();
        simpleLabelName = new javax.swing.JLabel();
        simpleLabelColor = new javax.swing.JLabel();
        simpleEntryName = new javax.swing.JTextField();
        simpleColorRed = new javax.swing.JRadioButton();
        simpleColorBlue = new javax.swing.JRadioButton();
        simpleColorBlack = new javax.swing.JRadioButton();
        simpleColorGreen = new javax.swing.JRadioButton();
        simpleColorWhite = new javax.swing.JRadioButton();
        simpleLabelType = new javax.swing.JLabel();
        simpleDropBoxTypeSelection = new javax.swing.JComboBox();
        simpleLabelText = new javax.swing.JLabel();
        simpleEntryText = new javax.swing.JTextField();
        simpleLabelColorRefinement = new javax.swing.JLabel();
        simpleRBExclude = new javax.swing.JRadioButton();
        simpleRBSelected = new javax.swing.JRadioButton();
        advancedSearchPane = new javax.swing.JPanel();
        advancedLabelName = new javax.swing.JLabel();
        advancedEntryName = new javax.swing.JTextField();
        advancedLabelColorSelection = new javax.swing.JLabel();
        advancedColorRed = new javax.swing.JRadioButton();
        advancedColorBlue = new javax.swing.JRadioButton();
        advancedColorBlack = new javax.swing.JRadioButton();
        advancedColorGreen = new javax.swing.JRadioButton();
        advancedColorWhite = new javax.swing.JRadioButton();
        advancedRarityCommon = new javax.swing.JRadioButton();
        advancedRarityUncommon = new javax.swing.JRadioButton();
        advancedRarityRare = new javax.swing.JRadioButton();
        advancedRarityMythic = new javax.swing.JRadioButton();
        advancedLabelRarity = new javax.swing.JLabel();
        advancedSearchButton = new javax.swing.JButton();
        advancedResetButton = new javax.swing.JButton();
        advancedLabelCMC = new javax.swing.JLabel();
        advancedLabelPower = new javax.swing.JLabel();
        advancedLabelToughness = new javax.swing.JLabel();
        advancedLabelType = new javax.swing.JLabel();
        advancedDropBoxType = new javax.swing.JComboBox();
        advancedLabelAbilitySelect = new javax.swing.JLabel();
        advancedDropBoxAbilitySelection = new javax.swing.JComboBox();
        advancedLabelSubType = new javax.swing.JLabel();
        advancedSubTypeSelection = new javax.swing.JTextField();
        advancedEntryCMC = new javax.swing.JTextField();
        advancedEntryPower = new javax.swing.JTextField();
        advancedEntryToughness = new javax.swing.JTextField();
        advancedLabelText = new javax.swing.JLabel();
        advancedEntryText = new javax.swing.JTextField();
        advancedLabelAbilitiesList = new javax.swing.JLabel();
        advancedLabelColorRefinement = new javax.swing.JLabel();
        advancedRBExclude = new javax.swing.JRadioButton();
        advancedRBSelected = new javax.swing.JRadioButton();
        advancedAbilitiesScrollPane = new javax.swing.JScrollPane();
        advancedAbilitiesList = new javax.swing.JList(abilitiesList);
        entrySearchOrganizedList = new javax.swing.JTextField();
        cardImage = new javax.swing.JLabel();
        searchListResultsPane = new javax.swing.JScrollPane();
        searchListResults = new javax.swing.JList(resultList);
        deckArea = new javax.swing.JPanel();
        deckScrollPane = new javax.swing.JScrollPane();
        deckList = new javax.swing.JTextArea();
        simulationPanel = new javax.swing.JPanel();
        Menu = new javax.swing.JMenuBar();
        fileMenuOption = new javax.swing.JMenu();
        fileNewOption = new javax.swing.JMenuItem();
        fileOpenOption = new javax.swing.JMenuItem();
        fileSaveOption = new javax.swing.JMenuItem();
        fileSaveAsOption = new javax.swing.JMenuItem();
        filePrintDeckListOption = new javax.swing.JMenuItem();
        fileCloseOption = new javax.swing.JMenuItem();
        editMenuOption = new javax.swing.JMenu();

        addOne.setText("Add one");
        cardAddToList.add(addOne);

        addTwo.setText("Add two");
        cardAddToList.add(addTwo);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Magic Deck Builder");
        setBackground(new java.awt.Color(0, 0, 0));
        setName("deckBuilderFrame"); // NOI18N
        setResizable(false);

        organizedList.setBackground(new java.awt.Color(255, 255, 255));
        organizedList.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        fullCardList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        fullCardList.setComponentPopupMenu(cardAddToList);
        fullCardList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fullCardListValueChanged(evt);
            }
        });
        organizedList.setViewportView(fullCardList);

        SearchPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SearchPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SearchPaneStateChanged(evt);
            }
        });

        simpleSearchPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        simpleSearchButton.setText("Search");
        simpleSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleSearchButtonActionPerformed(evt);
            }
        });

        simpleResetButton.setText("Reset");
        simpleResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleResetButtonActionPerformed(evt);
            }
        });

        simpleRarityGroup.add(simpleRarityMythic);
        simpleRarityMythic.setText("Mythic");
        simpleRarityMythic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleRarityMythicActionPerformed(evt);
            }
        });

        simpleRarityGroup.add(simpleRarityRare);
        simpleRarityRare.setText("Rare");
        simpleRarityRare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleRarityRareActionPerformed(evt);
            }
        });

        simpleRarityGroup.add(simpleRarityUncommon);
        simpleRarityUncommon.setText("Uncommon");
        simpleRarityUncommon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleRarityUncommonActionPerformed(evt);
            }
        });

        simpleRarityGroup.add(simpleRarityCommon);
        simpleRarityCommon.setText("Common");
        simpleRarityCommon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleRarityCommonActionPerformed(evt);
            }
        });

        simpleLabelRarity.setText("Rarity:");

        simpleLabelName.setText("Name:");

        simpleLabelColor.setText("Color:");

        simpleColorRed.setText("Red");

        simpleColorBlue.setText("Blue");

        simpleColorBlack.setText("Black");

        simpleColorGreen.setText("Green");

        simpleColorWhite.setText("White");

        simpleLabelType.setText("Type:");

        simpleDropBoxTypeSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<none>", "Artifact", "Instant", "Sorcery", "Creature", "Enchantment", "Land", "Planeswalker", "Tribal" }));
        simpleDropBoxTypeSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleDropBoxTypeSelectionActionPerformed(evt);
            }
        });

        simpleLabelText.setText("Text:");

        simpleLabelColorRefinement.setText("Color Refinement:");

        simpleColorRefinementGroup.add(simpleRBExclude);
        simpleRBExclude.setText("Exclude Selected");
        simpleRBExclude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleRBExcludeActionPerformed(evt);
            }
        });

        simpleColorRefinementGroup.add(simpleRBSelected);
        simpleRBSelected.setSelected(true);
        simpleRBSelected.setText("Selected Colors Only");
        simpleRBSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleRBSelectedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout simpleSearchPaneLayout = new javax.swing.GroupLayout(simpleSearchPane);
        simpleSearchPane.setLayout(simpleSearchPaneLayout);
        simpleSearchPaneLayout.setHorizontalGroup(
            simpleSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(simpleSearchPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(simpleSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(simpleSearchPaneLayout.createSequentialGroup()
                        .addComponent(simpleLabelColor, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(simpleColorRed)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(simpleColorBlue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(simpleColorBlack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(simpleColorGreen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(simpleColorWhite)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(simpleSearchPaneLayout.createSequentialGroup()
                        .addGroup(simpleSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(simpleLabelText)
                            .addComponent(simpleLabelType)
                            .addComponent(simpleLabelName))
                        .addGap(13, 13, 13)
                        .addGroup(simpleSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(simpleEntryName)
                            .addComponent(simpleDropBoxTypeSelection, 0, 329, Short.MAX_VALUE)
                            .addComponent(simpleEntryText))))
                .addGap(16, 16, 16))
            .addGroup(simpleSearchPaneLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(simpleSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(simpleSearchPaneLayout.createSequentialGroup()
                        .addGroup(simpleSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(simpleSearchPaneLayout.createSequentialGroup()
                                .addComponent(simpleLabelRarity)
                                .addGap(18, 18, 18)
                                .addComponent(simpleRarityMythic)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(simpleRarityRare))
                            .addComponent(simpleSearchButton, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(simpleSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(simpleSearchPaneLayout.createSequentialGroup()
                                .addComponent(simpleRarityUncommon)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(simpleRarityCommon))
                            .addComponent(simpleResetButton)))
                    .addGroup(simpleSearchPaneLayout.createSequentialGroup()
                        .addComponent(simpleRBExclude)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(simpleRBSelected))
                    .addComponent(simpleLabelColorRefinement))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        simpleSearchPaneLayout.setVerticalGroup(
            simpleSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, simpleSearchPaneLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(simpleSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(simpleLabelName)
                    .addComponent(simpleEntryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(simpleSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(simpleLabelText)
                    .addComponent(simpleEntryText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(simpleSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(simpleLabelType)
                    .addComponent(simpleDropBoxTypeSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(simpleSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(simpleLabelColor)
                    .addComponent(simpleColorRed)
                    .addComponent(simpleColorBlue)
                    .addComponent(simpleColorBlack)
                    .addComponent(simpleColorGreen)
                    .addComponent(simpleColorWhite))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(simpleLabelColorRefinement)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(simpleSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(simpleRBExclude)
                    .addComponent(simpleRBSelected))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(simpleSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(simpleLabelRarity)
                    .addComponent(simpleRarityMythic)
                    .addComponent(simpleRarityRare)
                    .addComponent(simpleRarityUncommon)
                    .addComponent(simpleRarityCommon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(simpleSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(simpleSearchButton)
                    .addComponent(simpleResetButton))
                .addContainerGap(214, Short.MAX_VALUE))
        );

        SearchPane.addTab("Simple Search", simpleSearchPane);

        advancedSearchPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        advancedLabelName.setText("Name:");

        advancedLabelColorSelection.setText("Color:");

        advancedColorRed.setText("Red");

        advancedColorBlue.setText("Blue");

        advancedColorBlack.setText("Black");

        advancedColorGreen.setText("Green");

        advancedColorWhite.setText("White");

        advancedRarityGroup.add(advancedRarityCommon);
        advancedRarityCommon.setText("Common");
        advancedRarityCommon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedRarityCommonActionPerformed(evt);
            }
        });

        advancedRarityGroup.add(advancedRarityUncommon);
        advancedRarityUncommon.setText("Uncommon");
        advancedRarityUncommon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedRarityUncommonActionPerformed(evt);
            }
        });

        advancedRarityGroup.add(advancedRarityRare);
        advancedRarityRare.setText("Rare");
        advancedRarityRare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedRarityRareActionPerformed(evt);
            }
        });

        advancedRarityGroup.add(advancedRarityMythic);
        advancedRarityMythic.setText("Mythic");
        advancedRarityMythic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedRarityMythicActionPerformed(evt);
            }
        });

        advancedLabelRarity.setText("Rarity:");

        advancedSearchButton.setText("Search");
        advancedSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedSearchButtonActionPerformed(evt);
            }
        });

        advancedResetButton.setText("Reset");
        advancedResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedResetButtonActionPerformed(evt);
            }
        });

        advancedLabelCMC.setText("Converted Mana Cost:");

        advancedLabelPower.setText("Power:");

        advancedLabelToughness.setText("Toughness:");

        advancedLabelType.setText("Type:");

        advancedDropBoxType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<none>", "Artifact", "Instant", "Sorcery", "Creature", "Enchantment", "Land", "Planeswalker", "Tribal" }));

        advancedLabelAbilitySelect.setText("Ability:");

        advancedDropBoxAbilitySelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<none>", " Absorb", " Affinity", " Amplify", " Annihilator", " Attach", " Aura swap", " Banding", " Bands with other", " Battalion", " Battle cry", " Bestow", " Bloodrush", " Bloodthirst", " Bolster", " Bury", " Bushido", " Buyback", " Cascade", " Champion", " Changeling", " Channel", " Chroma", " Cipher", " Clash", " Conspire", " Convoke", " Counter", " Cumulative upkeep", " Cycling", " Dash", " Deathtouch", " Defender", " Delve", " Detain", " Devour", " Domain", " Double strike", " Dredge", " Echo", " Enchant", " Entwine", " Epic", " Equip", " Evoke", " Evolve", " Exalted", " Exile", " Exploit", " Extort", " Fading", " Fateful hour", " Fateseal", " Fear", " Ferocious", " Fight", " First strike", " Flanking", " Flash", " Flashback", " Flip", " Flying", " Forecast", " Fortify", " Frenzy", " Graft", " Grandeur", " Gravestorm", " Haste", " Haunt", " Hellbent", " Heroic", " Hexproof", " Hideaway", " Horsemanship", " Imprint", " Indestructible", " Infect", " Intimidate", " Join forces", " Kicker", " Kinship", " Landfall", " Landwalk", " Level up", " Lifelink", " Living weapon", " Madness", " Manifest", " Menace", " Metalcraft", " Miracle", " Modular", " Monstrosity", " Morbid", " Morph", " Multikicker", " Ninjutsu", " Offering", " Overload", " Persist", " Phasing", " Poisonous", " Populate", " Proliferate", " Protection", " Provoke", " Prowess", " Prowl", " Radiance", " Raid", " Rampage", " Reach", " Rebound", " Recover", " Regenerate", " Reinforce", " Renown", " Replicate", " Retrace", " Ripple", " Sacrifice", " Scavenge", " Scry", " Scry", " Shadow", " Shroud", " Soulbond", " Soulshift", " Splice", " Split second", " Storm", " Substance", " Sunburst", " Suspend", " Sweep", " Tap", " Untap", " Threshold", " Totem armor", " Trample", " Transfigure", " Transform", " Transmute", " Typecycling", " Undying", " Unearth", " Unleash", " Vanishing", " Vigilance", " Wither" }));
        advancedDropBoxAbilitySelection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                advancedDropBoxAbilitySelectionItemStateChanged(evt);
            }
        });

        advancedLabelSubType.setText("Sub-type:");

        advancedLabelText.setText("Text:");

        advancedLabelAbilitiesList.setText("Abilities:");

        advancedLabelColorRefinement.setText("Color Refinement:");

        advancedColorRefinementGroup.add(advancedRBExclude);
        advancedRBExclude.setText("Exclude Selected");
        advancedRBExclude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedRBExcludeActionPerformed(evt);
            }
        });

        advancedColorRefinementGroup.add(advancedRBSelected);
        advancedRBSelected.setSelected(true);
        advancedRBSelected.setText("Selected Colors Only");
        advancedRBSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedRBSelectedActionPerformed(evt);
            }
        });

        advancedAbilitiesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        advancedAbilitiesList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                advancedAbilitiesListKeyPressed(evt);
            }
        });
        advancedAbilitiesScrollPane.setViewportView(advancedAbilitiesList);

        javax.swing.GroupLayout advancedSearchPaneLayout = new javax.swing.GroupLayout(advancedSearchPane);
        advancedSearchPane.setLayout(advancedSearchPaneLayout);
        advancedSearchPaneLayout.setHorizontalGroup(
            advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advancedSearchPaneLayout.createSequentialGroup()
                .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(advancedSearchPaneLayout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(advancedSearchButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(advancedResetButton))
                    .addGroup(advancedSearchPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(advancedSearchPaneLayout.createSequentialGroup()
                                .addComponent(advancedLabelRarity)
                                .addGap(18, 18, 18)
                                .addComponent(advancedRarityMythic)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(advancedRarityRare)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(advancedRarityUncommon)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(advancedRarityCommon))
                            .addGroup(advancedSearchPaneLayout.createSequentialGroup()
                                .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(advancedLabelToughness, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(advancedLabelPower, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(advancedLabelCMC, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(advancedEntryCMC, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(advancedEntryPower, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(advancedEntryToughness))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(advancedSearchPaneLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(advancedLabelColorRefinement)
                    .addGroup(advancedSearchPaneLayout.createSequentialGroup()
                        .addComponent(advancedRBExclude)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(advancedRBSelected))
                    .addGroup(advancedSearchPaneLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(advancedLabelAbilitySelect)
                            .addComponent(advancedLabelName)
                            .addComponent(advancedLabelText)
                            .addComponent(advancedLabelType)
                            .addComponent(advancedLabelSubType)
                            .addComponent(advancedLabelAbilitiesList)
                            .addComponent(advancedLabelColorSelection))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(advancedAbilitiesScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                            .addComponent(advancedDropBoxAbilitySelection, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(advancedEntryText)
                            .addComponent(advancedEntryName)
                            .addGroup(advancedSearchPaneLayout.createSequentialGroup()
                                .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(advancedSearchPaneLayout.createSequentialGroup()
                                        .addComponent(advancedColorRed)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(advancedColorBlue)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(advancedColorBlack)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(advancedColorGreen)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(advancedColorWhite))
                                    .addComponent(advancedSubTypeSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(advancedDropBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(17, 17, 17))
        );

        advancedSearchPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {advancedEntryCMC, advancedEntryPower, advancedEntryToughness});

        advancedSearchPaneLayout.setVerticalGroup(
            advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, advancedSearchPaneLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(advancedLabelName)
                    .addComponent(advancedEntryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(advancedLabelText)
                    .addComponent(advancedEntryText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(advancedLabelType)
                    .addComponent(advancedDropBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(advancedLabelSubType)
                    .addComponent(advancedSubTypeSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(advancedLabelAbilitySelect)
                    .addComponent(advancedDropBoxAbilitySelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(advancedSearchPaneLayout.createSequentialGroup()
                        .addComponent(advancedLabelAbilitiesList)
                        .addGap(42, 42, 42))
                    .addGroup(advancedSearchPaneLayout.createSequentialGroup()
                        .addComponent(advancedAbilitiesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(advancedLabelColorSelection)
                    .addComponent(advancedColorRed)
                    .addComponent(advancedColorBlue)
                    .addComponent(advancedColorBlack)
                    .addComponent(advancedColorGreen)
                    .addComponent(advancedColorWhite))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(advancedLabelColorRefinement)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(advancedRBExclude)
                    .addComponent(advancedRBSelected))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(advancedLabelRarity)
                    .addComponent(advancedRarityMythic)
                    .addComponent(advancedRarityRare)
                    .addComponent(advancedRarityUncommon)
                    .addComponent(advancedRarityCommon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(advancedLabelCMC)
                    .addComponent(advancedEntryCMC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(advancedLabelPower)
                    .addComponent(advancedEntryPower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(advancedLabelToughness)
                    .addComponent(advancedEntryToughness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(advancedSearchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(advancedSearchButton)
                    .addComponent(advancedResetButton))
                .addContainerGap())
        );

        SearchPane.addTab("Advanced Search", advancedSearchPane);

        entrySearchOrganizedList.setText("Search by Name");
        entrySearchOrganizedList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                entrySearchOrganizedListFocusGained(evt);
            }
        });
        entrySearchOrganizedList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                entrySearchOrganizedListKeyReleased(evt);
            }
        });

        cardImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/MagicTheGathering/mtgbackImage.jpg"))); // NOI18N
        cardImage.setToolTipText("Currently selected card");
        cardImage.setName("ImageLabel");

        searchListResultsPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        searchListResultsPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        searchListResultsPane.setMaximumSize(new java.awt.Dimension(410, 174));
        searchListResultsPane.setPreferredSize(new java.awt.Dimension(410, 174));

        searchListResults.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        searchListResults.setComponentPopupMenu(cardAddToList);
        searchListResults.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                searchListResultsValueChanged(evt);
            }
        });
        searchListResultsPane.setViewportView(searchListResults);

        deckScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        deckList.setColumns(20);
        deckList.setRows(5);
        deckScrollPane.setViewportView(deckList);

        javax.swing.GroupLayout deckAreaLayout = new javax.swing.GroupLayout(deckArea);
        deckArea.setLayout(deckAreaLayout);
        deckAreaLayout.setHorizontalGroup(
            deckAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(deckScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        deckAreaLayout.setVerticalGroup(
            deckAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(deckScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1308, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(organizedList, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(entrySearchOrganizedList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cardImage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SearchPane)
                    .addComponent(searchListResultsPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(deckArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        searchPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {entrySearchOrganizedList, organizedList});

        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                        .addComponent(cardImage, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(entrySearchOrganizedList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(organizedList))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(SearchPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchListResultsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(deckArea, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("Search", searchPanel);

        javax.swing.GroupLayout simulationPanelLayout = new javax.swing.GroupLayout(simulationPanel);
        simulationPanel.setLayout(simulationPanelLayout);
        simulationPanelLayout.setHorizontalGroup(
            simulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        simulationPanelLayout.setVerticalGroup(
            simulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Simulation", simulationPanel);

        fileMenuOption.setText("File");

        fileNewOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        fileNewOption.setText("New");
        fileMenuOption.add(fileNewOption);

        fileOpenOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        fileOpenOption.setText("Open");
        fileMenuOption.add(fileOpenOption);

        fileSaveOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        fileSaveOption.setText("Save");
        fileMenuOption.add(fileSaveOption);

        fileSaveAsOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        fileSaveAsOption.setText("Save As");
        fileMenuOption.add(fileSaveAsOption);

        filePrintDeckListOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        filePrintDeckListOption.setText("Print Deck List");
        fileMenuOption.add(filePrintDeckListOption);

        fileCloseOption.setText("Close");
        fileCloseOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileCloseOptionActionPerformed(evt);
            }
        });
        fileMenuOption.add(fileCloseOption);

        Menu.add(fileMenuOption);

        editMenuOption.setText("Edit");
        Menu.add(editMenuOption);

        setJMenuBar(Menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void simpleResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleResetButtonActionPerformed
        // TODO add your handling code here:
        // Reset all simple
        simpleEntryName.setText("");
        simpleEntryText.setText("");
        simpleColorRefinementGroup.setSelected(simpleRBSelected.getModel(), true);
        simpleRarityGroup.clearSelection();
        simpleDropBoxTypeSelection.setSelectedIndex(0);
        simpleColorWhite.setSelected(false);
        simpleColorRed.setSelected(false);
        simpleColorBlack.setSelected(false);
        simpleColorGreen.setSelected(false);
        simpleColorBlue.setSelected(false);
        colorRefinementFilter = "selected";
        rarityFilter = "";
        simpleDropBoxTypeSelection.setSelectedIndex(0);
        typeFilter = "";
    }//GEN-LAST:event_simpleResetButtonActionPerformed

    private void simpleSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleSearchButtonActionPerformed
        
        Iterator iter;
        Cards card;
        //Compile Filter
        searchFilter.name = simpleEntryName.getText();
        searchFilter.text = simpleEntryText.getText();
        if(!typeFilter.contains("none"))
        {
            searchFilter.type = typeFilter;
        }
        else
        {
            searchFilter.type = "";
        }
        searchFilter.colorRefinement = colorRefinementFilter;
        searchFilter.rarity = rarityFilter;
        
        if(simpleColorWhite.isSelected())
        {
            searchFilter.colors.add("White");
        }
        if(simpleColorBlue.isSelected())
        {
            searchFilter.colors.add("Blue");
        }
        if(simpleColorBlack.isSelected())
        {
            searchFilter.colors.add("Black");
        }
        if(simpleColorRed.isSelected())
        {
            searchFilter.colors.add("Red");
        }
        if(simpleColorGreen.isSelected())
        {
            searchFilter.colors.add("Green");
        }
        
        System.out.println(searchFilter.text);
        //Search from database
        my_list.searchByFilter(searchFilter);
        my_list.sortByName(my_list.results_list);
        
        iter = my_list.results_list.iterator();
        
        resultList.clear();
        resultList.ensureCapacity(my_list.results_list.size());
        //Add elements to the list.
        for( ; iter.hasNext(); )
        {
            card = (Cards) iter.next();
            resultList.addElement(card.name);
        }
    }//GEN-LAST:event_simpleSearchButtonActionPerformed

    private void simpleDropBoxTypeSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleDropBoxTypeSelectionActionPerformed
        typeFilter = simpleDropBoxTypeSelection.getSelectedItem().toString();
    }//GEN-LAST:event_simpleDropBoxTypeSelectionActionPerformed

    private void simpleRBSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleRBSelectedActionPerformed
        colorRefinementFilter = "selected";
    }//GEN-LAST:event_simpleRBSelectedActionPerformed

    private void fileCloseOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileCloseOptionActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_fileCloseOptionActionPerformed

    private void simpleRBExcludeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleRBExcludeActionPerformed
        colorRefinementFilter = "exclude";
    }//GEN-LAST:event_simpleRBExcludeActionPerformed

    private void entrySearchOrganizedListFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_entrySearchOrganizedListFocusGained
        if(firstFocus == true)
        {
            entrySearchOrganizedList.selectAll();
        }
        else
        {
            entrySearchOrganizedList.setText("");
            firstFocus = true;
        }
    }//GEN-LAST:event_entrySearchOrganizedListFocusGained

    private void entrySearchOrganizedListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_entrySearchOrganizedListKeyReleased
        String filter;
        int size, i;

        filter = entrySearchOrganizedList.getText();
        size = my_list.all_cards.size();
        
        fullCardList.clearSelection();
        namesList.clear();

        for(i = 0; i < size; i++)
        {
            namesList.addElement(my_list.all_cards.get(i).name);
        }
        
        DefaultListModel temp = namesList;
        
        for(i = 0; i < size; i++)
        {
            if(!my_list.all_cards.get(i).name.toLowerCase().contains(filter.toLowerCase()))
            {
                temp.removeElement(my_list.all_cards.get(i).name);
            }
        }
        namesList = temp;
    }//GEN-LAST:event_entrySearchOrganizedListKeyReleased

    private void fullCardListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fullCardListValueChanged
        //Set Icon to current selection
        int i;
        
        if(!fullCardList.getValueIsAdjusting() && !fullCardList.isSelectionEmpty())
        {
            String temp = fullCardList.getModel().getElementAt(
                    fullCardList.getSelectedIndex()).toString();
            for(i = 0; i < my_list.all_cards.size(); i++)
            {
                if(temp.compareToIgnoreCase(my_list.all_cards.get(i).name) == 0)
                {
                    cardImage.setIcon(new javax.swing.ImageIcon(my_list.all_cards.get(i).image_link));
                    break;
                }
            }
        }
    }//GEN-LAST:event_fullCardListValueChanged

    private void simpleRarityMythicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleRarityMythicActionPerformed
        rarityFilter = "mythic";
    }//GEN-LAST:event_simpleRarityMythicActionPerformed

    private void simpleRarityRareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleRarityRareActionPerformed
        rarityFilter = "rare";
    }//GEN-LAST:event_simpleRarityRareActionPerformed

    private void simpleRarityUncommonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleRarityUncommonActionPerformed
        rarityFilter = "uncommon";
    }//GEN-LAST:event_simpleRarityUncommonActionPerformed

    private void simpleRarityCommonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleRarityCommonActionPerformed
        rarityFilter = "common";
    }//GEN-LAST:event_simpleRarityCommonActionPerformed

    private void searchListResultsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_searchListResultsValueChanged
        int i;
        
        if(!searchListResults.getValueIsAdjusting() && !searchListResults.isSelectionEmpty())
        {
            String temp = searchListResults.getModel().getElementAt(
                    searchListResults.getSelectedIndex()).toString();
            for(i = 0; i < my_list.results_list.size(); i++)
            {
                if(temp.compareToIgnoreCase(my_list.results_list.get(i).name) == 0)
                {
                    cardImage.setIcon(new javax.swing.ImageIcon(my_list.results_list.get(i).image_link));
                    break;
                }
            }
        }
    }//GEN-LAST:event_searchListResultsValueChanged

    private void SearchPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SearchPaneStateChanged
        // TODO add your handling code here:
        
        //Clear filter
        searchFilter.abilities.clear();
        searchFilter.colors.clear();
        searchFilter.cmc                = null;
        searchFilter.colorRefinement    = null;
        searchFilter.name               = null;
        searchFilter.power              = null;
        searchFilter.rarity             = null;
        searchFilter.subType            = null;
        searchFilter.text               = null;
        searchFilter.toughness          = null;
        searchFilter.type               = "none";
        colorRefinementFilter           = null;
        rarityFilter                    = null;
    }//GEN-LAST:event_SearchPaneStateChanged

    private void advancedResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedResetButtonActionPerformed
        // TODO add your handling code here:
        advancedColorBlack.setSelected(false);
        advancedColorBlue.setSelected(false);
        advancedColorRed.setSelected(false);
        advancedColorGreen.setSelected(false);
        advancedColorWhite.setSelected(false);
        advancedColorRefinementGroup.setSelected(advancedRBSelected.getModel(), true);
        advancedRarityGroup.clearSelection();
        advancedDropBoxType.setSelectedIndex(0);
        advancedAbilitiesList.clearSelection();
        abilitiesList.clear();
        advancedDropBoxAbilitySelection.setSelectedIndex(0);
        advancedSubTypeSelection.setText("");
        advancedEntryName.setText("");
        advancedEntryText.setText("");
        advancedEntryCMC.setText("");
        advancedEntryPower.setText("");
        advancedEntryToughness.setText("");
    }//GEN-LAST:event_advancedResetButtonActionPerformed

    private void advancedSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedSearchButtonActionPerformed
        // TODO add your handling code here:
        Iterator iter;
        Cards card;
        int i;
        //Compile Filter
        searchFilter.name = advancedEntryName.getText();
        searchFilter.text = advancedEntryText.getText();
        if(!advancedDropBoxType.getSelectedItem().toString().contains("none"))
        {
            searchFilter.type = advancedDropBoxType.getSelectedItem().toString();
        }
        else
        {
            searchFilter.type = "";
        }
        searchFilter.colorRefinement = colorRefinementFilter;
        searchFilter.rarity = rarityFilter;
        
        if(advancedColorWhite.isSelected())
        {
            searchFilter.colors.add("White");
        }
        if(advancedColorBlue.isSelected())
        {
            searchFilter.colors.add("Blue");
        }
        if(advancedColorBlack.isSelected())
        {
            searchFilter.colors.add("Black");
        }
        if(advancedColorRed.isSelected())
        {
            searchFilter.colors.add("Red");
        }
        if(advancedColorGreen.isSelected())
        {
            searchFilter.colors.add("Green");
        }
        
        if(!advancedEntryCMC.getText().equals(""))
        {
            searchFilter.cmc = advancedEntryCMC.getText();
        }
        // Power
        if(!advancedEntryPower.getText().equals(""))
        {
            if((advancedEntryPower.getText().contains("*")) || 
                    advancedEntryPower.getText().contains("."))
            {
                searchFilter.power = advancedEntryPower.getText();
            }
            else
            {
                try
                {
                    searchFilter.intpower = Integer.parseInt(advancedEntryPower
                                                                .getText());
                } 
                catch(NumberFormatException error)
                {
                    System.out.println(error + "User did not input an integer");
                }
            }
        }
        // Toughness
        if(!advancedEntryToughness.getText().equals(""))
        {
            if((advancedEntryToughness.getText().contains("*")) || 
                    advancedEntryToughness.getText().contains("."))
            {
                searchFilter.toughness = advancedEntryToughness.getText();
            }
            else
            {
                try
                {
                    searchFilter.inttoughness = Integer.parseInt(advancedEntryToughness
                                                                .getText());
                } 
                catch(NumberFormatException error)
                {
                    System.out.println(error + "User did not input an integer");
                }
            }
        }
        // Converted Mana Cost
        if(!advancedEntryCMC.getText().equals(""))
        {
            if(advancedEntryCMC.getText().contains("."))
            {
                searchFilter.cmc = advancedEntryCMC.getText();
            }
            else
            {
                try
                {
                    searchFilter.intcmc = Integer.parseInt(advancedEntryCMC
                                                                .getText());
                } 
                catch(NumberFormatException error)
                {
                    System.out.println(error + "User did not input an integer");
                }
            }
        }
        
        searchFilter.subType = advancedSubTypeSelection.getText().toLowerCase();
        
        for( i = 0; i < abilitiesList.size(); i++)
        {
            searchFilter.abilities.add(abilitiesList.getElementAt(i).toString());
        }
        
        //Search from database
        my_list.searchByFilter(searchFilter);
        my_list.sortByName(my_list.results_list);
        
        iter = my_list.results_list.iterator();
        
        resultList.clear();
        resultList.ensureCapacity(my_list.results_list.size());
        //Add elements to the list.
        for( ; iter.hasNext(); )
        {
            card = (Cards) iter.next();
            resultList.addElement(card.name);
        }
    }//GEN-LAST:event_advancedSearchButtonActionPerformed

    private void advancedAbilitiesListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_advancedAbilitiesListKeyPressed
        // TODO add your handling code here:
        int[] indices;
        int i;
        if(evt.getKeyCode() == 127)
        {
            indices = advancedAbilitiesList.getSelectedIndices();
            if(abilitiesList.size() == 1)
            {
                abilitiesList.clear();
            }
            else
            {
                for(i = indices.length; i > 0; i--)
                {
                    abilitiesList.remove(i);
                }
            }
        }
    }//GEN-LAST:event_advancedAbilitiesListKeyPressed

    private void advancedDropBoxAbilitySelectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_advancedDropBoxAbilitySelectionItemStateChanged
        // TODO add your handling code here:
        String elementToAdd = advancedDropBoxAbilitySelection.getSelectedItem()
                .toString();
        
        if((evt.getStateChange()) == 1 && (elementToAdd != "<none>"))
        {
            abilitiesList.addElement(elementToAdd);
        }
    }//GEN-LAST:event_advancedDropBoxAbilitySelectionItemStateChanged

    private void advancedRBExcludeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedRBExcludeActionPerformed
        // TODO add your handling code here:
        colorRefinementFilter = "excluded";
    }//GEN-LAST:event_advancedRBExcludeActionPerformed

    private void advancedRBSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedRBSelectedActionPerformed
        // TODO add your handling code here:
        colorRefinementFilter = "selected";
    }//GEN-LAST:event_advancedRBSelectedActionPerformed

    private void advancedRarityMythicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedRarityMythicActionPerformed
        // TODO add your handling code here:
        rarityFilter = "Mythic";
    }//GEN-LAST:event_advancedRarityMythicActionPerformed

    private void advancedRarityUncommonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedRarityUncommonActionPerformed
        // TODO add your handling code here:
        rarityFilter = "Uncommon";
    }//GEN-LAST:event_advancedRarityUncommonActionPerformed

    private void advancedRarityCommonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedRarityCommonActionPerformed
        // TODO add your handling code here:
        rarityFilter = "Common";
    }//GEN-LAST:event_advancedRarityCommonActionPerformed

    private void advancedRarityRareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedRarityRareActionPerformed
        // TODO add your handling code here:
        rarityFilter = "Rare";
    }//GEN-LAST:event_advancedRarityRareActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MagicTheGatheringUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MagicTheGatheringUI().setVisible(true);
            }
        });
    }

    
    private String typeFilter = "";
    private String colorRefinementFilter = "";
    private String rarityFilter = "";
    private CardList my_list;
    private DefaultListModel namesList = new DefaultListModel();
    private DefaultListModel resultList = new DefaultListModel();
    private DefaultListModel abilitiesList = new DefaultListModel();
    private boolean firstFocus = false;
    private SearchFilter searchFilter = new SearchFilter();
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar Menu;
    private javax.swing.JTabbedPane SearchPane;
    private javax.swing.JMenuItem addOne;
    private javax.swing.JMenuItem addTwo;
    private javax.swing.JList advancedAbilitiesList;
    private javax.swing.JScrollPane advancedAbilitiesScrollPane;
    private javax.swing.JRadioButton advancedColorBlack;
    private javax.swing.JRadioButton advancedColorBlue;
    private javax.swing.JRadioButton advancedColorGreen;
    private javax.swing.JRadioButton advancedColorRed;
    private javax.swing.ButtonGroup advancedColorRefinementGroup;
    private javax.swing.JRadioButton advancedColorWhite;
    private javax.swing.JComboBox advancedDropBoxAbilitySelection;
    private javax.swing.JComboBox advancedDropBoxType;
    private javax.swing.JTextField advancedEntryCMC;
    private javax.swing.JTextField advancedEntryName;
    private javax.swing.JTextField advancedEntryPower;
    private javax.swing.JTextField advancedEntryText;
    private javax.swing.JTextField advancedEntryToughness;
    private javax.swing.JLabel advancedLabelAbilitiesList;
    private javax.swing.JLabel advancedLabelAbilitySelect;
    private javax.swing.JLabel advancedLabelCMC;
    private javax.swing.JLabel advancedLabelColorRefinement;
    private javax.swing.JLabel advancedLabelColorSelection;
    private javax.swing.JLabel advancedLabelName;
    private javax.swing.JLabel advancedLabelPower;
    private javax.swing.JLabel advancedLabelRarity;
    private javax.swing.JLabel advancedLabelSubType;
    private javax.swing.JLabel advancedLabelText;
    private javax.swing.JLabel advancedLabelToughness;
    private javax.swing.JLabel advancedLabelType;
    private javax.swing.JRadioButton advancedRBExclude;
    private javax.swing.JRadioButton advancedRBSelected;
    private javax.swing.JRadioButton advancedRarityCommon;
    private javax.swing.ButtonGroup advancedRarityGroup;
    private javax.swing.JRadioButton advancedRarityMythic;
    private javax.swing.JRadioButton advancedRarityRare;
    private javax.swing.JRadioButton advancedRarityUncommon;
    private javax.swing.JButton advancedResetButton;
    private javax.swing.JButton advancedSearchButton;
    private javax.swing.JPanel advancedSearchPane;
    private javax.swing.JTextField advancedSubTypeSelection;
    private javax.swing.JPopupMenu cardAddToList;
    private javax.swing.JLabel cardImage;
    private javax.swing.JPanel deckArea;
    private javax.swing.JTextArea deckList;
    private javax.swing.JScrollPane deckScrollPane;
    private javax.swing.JMenu editMenuOption;
    private javax.swing.JTextField entrySearchOrganizedList;
    private javax.swing.JMenuItem fileCloseOption;
    private javax.swing.JMenu fileMenuOption;
    private javax.swing.JMenuItem fileNewOption;
    private javax.swing.JMenuItem fileOpenOption;
    private javax.swing.JMenuItem filePrintDeckListOption;
    private javax.swing.JMenuItem fileSaveAsOption;
    private javax.swing.JMenuItem fileSaveOption;
    private javax.swing.JList fullCardList;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JScrollPane organizedList;
    private javax.swing.JList searchListResults;
    private javax.swing.JScrollPane searchListResultsPane;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JRadioButton simpleColorBlack;
    private javax.swing.JRadioButton simpleColorBlue;
    private javax.swing.JRadioButton simpleColorGreen;
    private javax.swing.JRadioButton simpleColorRed;
    private javax.swing.ButtonGroup simpleColorRefinementGroup;
    private javax.swing.JRadioButton simpleColorWhite;
    private javax.swing.JComboBox simpleDropBoxTypeSelection;
    private javax.swing.JTextField simpleEntryName;
    private javax.swing.JTextField simpleEntryText;
    private javax.swing.JLabel simpleLabelColor;
    private javax.swing.JLabel simpleLabelColorRefinement;
    private javax.swing.JLabel simpleLabelName;
    private javax.swing.JLabel simpleLabelRarity;
    private javax.swing.JLabel simpleLabelText;
    private javax.swing.JLabel simpleLabelType;
    private javax.swing.JRadioButton simpleRBExclude;
    private javax.swing.JRadioButton simpleRBSelected;
    private javax.swing.JRadioButton simpleRarityCommon;
    private javax.swing.ButtonGroup simpleRarityGroup;
    private javax.swing.JRadioButton simpleRarityMythic;
    private javax.swing.JRadioButton simpleRarityRare;
    private javax.swing.JRadioButton simpleRarityUncommon;
    private javax.swing.JButton simpleResetButton;
    private javax.swing.JButton simpleSearchButton;
    private javax.swing.JPanel simpleSearchPane;
    private javax.swing.JPanel simulationPanel;
    // End of variables declaration//GEN-END:variables
}
